// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using B.Models;
//
//    var bModel = BModel.FromJson(jsonString);

namespace B.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class BModel
    {
        [JsonProperty("list")]
        public ArpltnInforInqireSvcVo[] List { get; set; }

        [JsonProperty("parm")]
        public ArpltnInforInqireSvcVo Parm { get; set; }

        [JsonProperty("ArpltnInforInqireSvcVo")]
        public ArpltnInforInqireSvcVo ArpltnInforInqireSvcVo { get; set; }

        [JsonProperty("totalCount")]
        public long TotalCount { get; set; }
    }

    public partial class ArpltnInforInqireSvcVo
    {
        [JsonProperty("_returnType")]
        public ReturnType ReturnType { get; set; }

        [JsonProperty("coGrade")]
        public string CoGrade { get; set; }

        [JsonProperty("coValue")]
        public string CoValue { get; set; }

        [JsonProperty("dataTerm")]
        public DataTerm DataTerm { get; set; }

        [JsonProperty("dataTime")]
        public string DataTime { get; set; }

        [JsonProperty("khaiGrade")]
        public string KhaiGrade { get; set; }

        [JsonProperty("khaiValue")]
        public string KhaiValue { get; set; }

        [JsonProperty("mangName")]
        public MangName MangName { get; set; }

        [JsonProperty("no2Grade")]
        public string No2Grade { get; set; }

        [JsonProperty("no2Value")]
        public string No2Value { get; set; }

        [JsonProperty("numOfRows")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long NumOfRows { get; set; }

        [JsonProperty("o3Grade")]
        public string O3Grade { get; set; }

        [JsonProperty("o3Value")]
        public string O3Value { get; set; }

        [JsonProperty("pageNo")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PageNo { get; set; }

        [JsonProperty("pm10Grade")]
        public string Pm10Grade { get; set; }

        [JsonProperty("pm10Grade1h")]
        public string Pm10Grade1H { get; set; }

        [JsonProperty("pm10Value")]
        public string Pm10Value { get; set; }

        [JsonProperty("pm10Value24")]
        public string Pm10Value24 { get; set; }

        [JsonProperty("pm25Grade")]
        public string Pm25Grade { get; set; }

        [JsonProperty("pm25Grade1h")]
        public string Pm25Grade1H { get; set; }

        [JsonProperty("pm25Value")]
        public string Pm25Value { get; set; }

        [JsonProperty("pm25Value24")]
        public string Pm25Value24 { get; set; }

        [JsonProperty("resultCode")]
        public string ResultCode { get; set; }

        [JsonProperty("resultMsg")]
        public string ResultMsg { get; set; }

        [JsonProperty("rnum")]
        public long Rnum { get; set; }

        [JsonProperty("serviceKey")]
        public string ServiceKey { get; set; }

        [JsonProperty("sidoName")]
        public string SidoName { get; set; }

        [JsonProperty("so2Grade")]
        public string So2Grade { get; set; }

        [JsonProperty("so2Value")]
        public string So2Value { get; set; }

        [JsonProperty("stationCode")]
        public string StationCode { get; set; }

        [JsonProperty("stationName")]
        public StationName StationName { get; set; }

        [JsonProperty("totalCount")]
        public string TotalCount { get; set; }

        [JsonProperty("ver")]
        public Ver Ver { get; set; }
    }

    public enum DataTerm { Empty, Month };

    public enum MangName { Empty, 도시대기 };

    public enum ReturnType { Json };

    public enum StationName { Empty, 종로구 };

    public enum Ver { Empty, The13 };

    public partial class BModel
    {
        public static BModel FromJson(string json) => JsonConvert.DeserializeObject<BModel>(json, B.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this BModel self) => JsonConvert.SerializeObject(self, B.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ReturnTypeConverter.Singleton,
                DataTermConverter.Singleton,
                MangNameConverter.Singleton,
                StationNameConverter.Singleton,
                VerConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ReturnTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ReturnType) || t == typeof(ReturnType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "json")
            {
                return ReturnType.Json;
            }
            throw new Exception("Cannot unmarshal type ReturnType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ReturnType)untypedValue;
            if (value == ReturnType.Json)
            {
                serializer.Serialize(writer, "json");
                return;
            }
            throw new Exception("Cannot marshal type ReturnType");
        }

        public static readonly ReturnTypeConverter Singleton = new ReturnTypeConverter();
    }

    internal class DataTermConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DataTerm) || t == typeof(DataTerm?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return DataTerm.Empty;
                case "MONTH":
                    return DataTerm.Month;
            }
            throw new Exception("Cannot unmarshal type DataTerm");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DataTerm)untypedValue;
            switch (value)
            {
                case DataTerm.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case DataTerm.Month:
                    serializer.Serialize(writer, "MONTH");
                    return;
            }
            throw new Exception("Cannot marshal type DataTerm");
        }

        public static readonly DataTermConverter Singleton = new DataTermConverter();
    }

    internal class MangNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MangName) || t == typeof(MangName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return MangName.Empty;
                case "도시대기":
                    return MangName.도시대기;
            }
            throw new Exception("Cannot unmarshal type MangName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MangName)untypedValue;
            switch (value)
            {
                case MangName.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case MangName.도시대기:
                    serializer.Serialize(writer, "도시대기");
                    return;
            }
            throw new Exception("Cannot marshal type MangName");
        }

        public static readonly MangNameConverter Singleton = new MangNameConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class StationNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(StationName) || t == typeof(StationName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return StationName.Empty;
                case "종로구":
                    return StationName.종로구;
            }
            throw new Exception("Cannot unmarshal type StationName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (StationName)untypedValue;
            switch (value)
            {
                case StationName.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case StationName.종로구:
                    serializer.Serialize(writer, "종로구");
                    return;
            }
            throw new Exception("Cannot marshal type StationName");
        }

        public static readonly StationNameConverter Singleton = new StationNameConverter();
    }

    internal class VerConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Ver) || t == typeof(Ver?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Ver.Empty;
                case "1.3":
                    return Ver.The13;
            }
            throw new Exception("Cannot unmarshal type Ver");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Ver)untypedValue;
            switch (value)
            {
                case Ver.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Ver.The13:
                    serializer.Serialize(writer, "1.3");
                    return;
            }
            throw new Exception("Cannot marshal type Ver");
        }

        public static readonly VerConverter Singleton = new VerConverter();
    }
}
