// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using TizenPrj.models;
//
//    var infoModel = InfoModel.FromJson(jsonString);

namespace TizenPrj.models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class InfoModel
    {
        [JsonProperty("_returnType")]
        public ReturnType ReturnType { get; set; }

        [JsonProperty("coGrade")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long CoGrade { get; set; }

        [JsonProperty("coValue")]
        public string CoValue { get; set; }

        [JsonProperty("dataTerm")]
        public string DataTerm { get; set; }

        [JsonProperty("dataTime")]
        public DataTime DataTime { get; set; }

        [JsonProperty("khaiGrade")]
        public string KhaiGrade { get; set; }

        [JsonProperty("khaiValue")]
        public string KhaiValue { get; set; }

        [JsonProperty("mangName")]
        public MangName MangName { get; set; }

        [JsonProperty("no2Grade")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long No2Grade { get; set; }

        [JsonProperty("no2Value")]
        public string No2Value { get; set; }

        [JsonProperty("numOfRows")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long NumOfRows { get; set; }

        [JsonProperty("o3Grade")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long O3Grade { get; set; }

        [JsonProperty("o3Value")]
        public string O3Value { get; set; }

        [JsonProperty("pageNo")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PageNo { get; set; }

        [JsonProperty("pm10Grade")]
        public string Pm10Grade { get; set; }

        [JsonProperty("pm10Grade1h")]
        public string Pm10Grade1H { get; set; }

        [JsonProperty("pm10Value")]
        public string Pm10Value { get; set; }

        [JsonProperty("pm10Value24")]
        public string Pm10Value24 { get; set; }

        [JsonProperty("pm25Grade")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Pm25Grade { get; set; }

        [JsonProperty("pm25Grade1h")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Pm25Grade1H { get; set; }

        [JsonProperty("pm25Value")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Pm25Value { get; set; }

        [JsonProperty("pm25Value24")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Pm25Value24 { get; set; }

        [JsonProperty("resultCode")]
        public string ResultCode { get; set; }

        [JsonProperty("resultMsg")]
        public string ResultMsg { get; set; }

        [JsonProperty("rnum")]
        public long Rnum { get; set; }

        [JsonProperty("serviceKey")]
        public string ServiceKey { get; set; }

        [JsonProperty("sidoName")]
        public string SidoName { get; set; }

        [JsonProperty("so2Grade")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long So2Grade { get; set; }

        [JsonProperty("so2Value")]
        public string So2Value { get; set; }

        [JsonProperty("stationCode")]
        public string StationCode { get; set; }

        [JsonProperty("stationName")]
        public string StationName { get; set; }

        [JsonProperty("totalCount")]
        public string TotalCount { get; set; }

        [JsonProperty("ver")]
        public string Ver { get; set; }
    }

    public enum DataTime { The202009050900 };

    public enum MangName { 도로변대기, 도시대기 };

    public enum ReturnType { Json };

    public partial class InfoModel
    {
        public static InfoModel[] FromJson(string json) => JsonConvert.DeserializeObject<InfoModel[]>(json, TizenPrj.models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this InfoModel[] self) => JsonConvert.SerializeObject(self, TizenPrj.models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ReturnTypeConverter.Singleton,
                DataTimeConverter.Singleton,
                MangNameConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ReturnTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ReturnType) || t == typeof(ReturnType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "json")
            {
                return ReturnType.Json;
            }
            throw new Exception("Cannot unmarshal type ReturnType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ReturnType)untypedValue;
            if (value == ReturnType.Json)
            {
                serializer.Serialize(writer, "json");
                return;
            }
            throw new Exception("Cannot marshal type ReturnType");
        }

        public static readonly ReturnTypeConverter Singleton = new ReturnTypeConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class DataTimeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DataTime) || t == typeof(DataTime?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "2020-09-05 09:00")
            {
                return DataTime.The202009050900;
            }
            throw new Exception("Cannot unmarshal type DataTime");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DataTime)untypedValue;
            if (value == DataTime.The202009050900)
            {
                serializer.Serialize(writer, "2020-09-05 09:00");
                return;
            }
            throw new Exception("Cannot marshal type DataTime");
        }

        public static readonly DataTimeConverter Singleton = new DataTimeConverter();
    }

    internal class MangNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MangName) || t == typeof(MangName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "도로변대기":
                    return MangName.도로변대기;
                case "도시대기":
                    return MangName.도시대기;
            }
            throw new Exception("Cannot unmarshal type MangName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MangName)untypedValue;
            switch (value)
            {
                case MangName.도로변대기:
                    serializer.Serialize(writer, "도로변대기");
                    return;
                case MangName.도시대기:
                    serializer.Serialize(writer, "도시대기");
                    return;
            }
            throw new Exception("Cannot marshal type MangName");
        }

        public static readonly MangNameConverter Singleton = new MangNameConverter();
    }
}
